---
- name: Get information about instance from OpenStack
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
  tasks:
  - name: Get public IP address of OpenStack instance
    ceradmin.openstack.get_instance_details:
      instance_id: "{{ instance_id }}"
    register: instance_details
    environment:
      APPLICATION_CREDENTIAL_ID: "{{ app_cred_id }}"
      APPLICATION_CREDENTIAL_SECRET: "{{ app_cred_secret }}"
      AUTH_URL: "{{ auth_url }}"

  - name: Check if we got a public IP address
    fail:
      msg: "VM does not appear to have a public address"
    when: instance_details.public_ip is not match("^130\.216\.\d{1,3}\.\d{1,3}$")

- name: Create host group with single IP
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - name: Create temp host group from IP
    add_host:
      hostname: "{{ instance_details.public_ip }}"
      groupname: tmp_group      

- name: Verify basic accessibility of VM
  hosts: tmp_group,!localhost
  gather_facts: no
  become: true
  tasks:
  - action: ping

- name: Configure aklops user
  hosts: tmp_group,!localhost
  gather_facts: no
  become: true

  tasks:
  - name: Set up account for management user
    user:
      name: "{{ management_user }}"
      comment: Security-related account set up by the Centre for eResearch. Please do not delete
      create_home: yes
      shell: /bin/bash
      expires: -1

  - name: Add public key to authorized_keys file
    ansible.posix.authorized_key:
      user: "{{ management_user }}"
      state: present
      key: "{{ management_user_public_key }}"

  - name: Allow management user to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: "^{{ management_user }}"
      line: "{{ management_user }} ALL=(ALL) NOPASSWD: ALL"
      validate: "visudo -cf %s"

      #- name: Remove SSH key from authorized_keys for provided user
      #  hosts: tmp_group,!localhost
      #  gather_facts: no
      #  become: true
      #
      #  tasks:
      #  - name: Remove public key from authorized_keys file
      #    ansible.posix.authorized_key:
      #      user: "{{ ansible_user }}"
      #      state: absent
      #      key: "{{ management_user_public_key }}"

- name: Tagging OpenStack VM 
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - name: Setting tag management_account_configured
    ceradmin.openstack.set_instance_tag:
      instance_id: "{{ instance_id }}"
      tag: management_account_configured

################# TENABLE ##############

- name: Nessus Agent Installation
  hosts: tmp_group,!localhost
  gather_facts: yes
  become: yes
  vars:
    # Why do I need to use hostvars here? --> https://stackoverflow.com/questions/33896847/how-do-i-set-register-a-variable-to-persist-between-plays-in-ansible
    tenable_agent_name: "pid={{ hostvars['localhost']['instance_details'].project_id }},uuid={{ instance_id  }}"
  tasks:
  - name: Define Variables for CentOS 8/Rocky 8
    set_fact:
     agent_file_src: "{{ local_agent_installer_dir }}/NessusAgent-10.1.4-es8.x86_64.rpm"
     agent_file_dest: /tmp/NessusAgent-10.1.4-es8.x86_64.rpm
    when: (ansible_facts['distribution'] == "CentOS" and ansible_facts['distribution_major_version'] == "8") or (ansible_facts['distribution'] == "Rocky" and ansible_facts['distribution_major_version'] == "8")

  - name: Define Variables for CentOS 7
    set_fact:
     agent_file_src: "{{ local_agent_installer_dir }}/NessusAgent-10.1.4-es7.x86_64.rpm"
     agent_file_dest: /tmp/NessusAgent-10.1.4-es7.x86_64.rpm
    when:
     - ansible_facts['distribution'] == "CentOS"
     - ansible_facts['distribution_major_version'] == "7"

  - name: Define Variables for Fedora
    set_fact:
     agent_file_src: "{{ local_agent_installer_dir }}/NessusAgent-10.1.4-fc20.x86_64.rpm"
     agent_file_dest: /tmp/NessusAgent-10.1.4-fc20.x86_64.rpm
    when:
     - ansible_facts['distribution'] == "Fedora"

  - name: Define Variables for Ubuntu
    set_fact:
     agent_file_src: "{{ local_agent_installer_dir }}/NessusAgent-10.1.4-ubuntu1110_amd64.deb"
     agent_file_dest: /tmp/NessusAgent-10.1.4-ubuntu1110_amd64.deb
    when:
     - ansible_facts['distribution'] == "Ubuntu"

  - name: Define Variables for Debian
    set_fact:
     agent_file_src: "{{ local_agent_installer_dir }}/NessusAgent-10.1.4-debian6_amd64.deb"
     agent_file_dest: /tmp/NessusAgent-10.1.4-debian6_amd64.deb
    when:
     - ansible_facts['distribution'] == "Debian"

  - name: Check link status
    shell: /opt/nessus_agent/sbin/nessuscli agent status; true
    register: nessus_link_status

  - name: Check Nessus Agent Service Status
    shell: systemctl status nessusagent; true
    register: nessus_agent_service_status

  - name: TESTING BLOCK FOR Centos/Fedora/Rocky
    ansible.builtin.debug:
      msg:
      - "THIS VM IS RUNNING CENTOS OR FEDORA OR ROCKY, AND THE AGENT IS NOT YET INSTALLED."
    when: nessus_link_status.stdout.find(tenable_host|string) == -1 and nessus_link_status.stdout.find(tenable_port|string) == -1 and (ansible_facts['distribution'] == "CentOS" or ansible_facts['distribution'] == "Fedora" or ansible_facts['distribution'] == "Rocky")

  - name: TESTING BLOCK FOR Ubuntu/Debian
    ansible.builtin.debug:
      msg:
      - "THIS VM IS RUNNING UBUNTU OR DEBIAN, AND THE AGENT IS NOT YET INSTALLED."
    when: nessus_link_status.stdout.find(tenable_host|string) == -1 and nessus_link_status.stdout.find(tenable_port|string) == -1 and (ansible_facts['distribution'] == "Ubuntu" or ansible_facts['distribution'] == "Debian")

  - name: Copy installation package to server
    copy:
     src: "{{ agent_file_src }}"
     dest: "{{ agent_file_dest }}"
    when:
     - nessus_link_status.stdout.find(tenable_host|string) == -1
     - nessus_link_status.stdout.find(tenable_port|string) == -1

  - name: Install Nessus Agent rpm from a local file for CentOS/Fedora/Rocky
    yum:
      name: "{{ agent_file_dest }}"
      state: present
      disable_gpg_check: yes
    when: nessus_link_status.stdout.find(tenable_host|string) == -1 and nessus_link_status.stdout.find(tenable_port|string) == -1 and (ansible_facts['distribution'] == "CentOS" or ansible_facts['distribution'] == "Fedora" or ansible_facts['distribution'] == "Rocky")

  - name: Install Nessus Agent deb from a local file for Ubuntu/Debian
    apt:
      deb: "{{ agent_file_dest }}"
    when: nessus_link_status.stdout.find(tenable_host|string) == -1 and nessus_link_status.stdout.find(tenable_port|string) == -1 and (ansible_facts['distribution'] == "Ubuntu" or ansible_facts['distribution'] == "Debian")

  - name: Link nessus agent to tenable
    shell: /opt/nessus_agent/sbin/nessuscli agent link --host={{ tenable_host }} --port={{ tenable_port }} --key={{ tenable_linking_key }} --groups={{ tenable_agent_group }} --name={{ tenable_agent_name }}
    when:
     - nessus_link_status.stdout.find(tenable_host|string) == -1
     - nessus_link_status.stdout.find(tenable_port|string) == -1

  - name: Starting Nessus Agent service
    command: systemctl start nessusagent
    when:
     - nessus_link_status.stdout.find(tenable_host|string) == -1
     - nessus_link_status.stdout.find(tenable_port|string) == -1
     - nessus_agent_service_status.stdout.find("active (running)") == -1

  - name: Notification
    ansible.builtin.debug:
      msg:
      - "THIS VM HAS NESSUS AGENT INSTALLED AND LINKED, AND IT IS CURRENTLY RUNNING."
    when:
     - nessus_link_status.stdout.find(tenable_host|string) != -1
     - nessus_link_status.stdout.find(tenable_port|string) != -1
     - nessus_agent_service_status.stdout.find("active (running)") != -1

- name: Tagging OpenStack VM
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - name: Setting tag tenable_agent_linked
    ceradmin.openstack.set_instance_tag:
      instance_id: "{{ instance_id }}"
      tag: tenable_agent_linked
